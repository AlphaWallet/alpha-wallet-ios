//
//  Base64DecoderTests.swift
//  AlphaWalletTests
//
//  Created by Vladyslav Shepitko on 25.04.2023.
//

@testable import AlphaWallet
import AlphaWalletFoundation
import Foundation
import XCTest

final class Base64DecoderTests: XCTestCase {
    func testNil() throws {
        let decoder = Base64Decoder()
        XCTAssertNil(decoder.decode(string: "hello"))
    }

    func testValidBase64String() throws {
        let decoder = Base64Decoder()
        let res = decoder.decode(string: "data:application/json;base64,ewogICJuYW1lIjogIk5GVFdvcmxkcyBBdmF0YXIgTWludCBQYXNzIiwKICAiZGVzY3JpcHRpb24iOiAiQnkgW1l1Z2FMYWJzXShodHRwczovL29wZW5zZWEuaW8vWXVnYUxhYnMpXHJcblxyXG5QYXNzIHRvIHRha2UgcGFydCBpbiBORlRXb3JsZHMgQXZhdGFyIE1pbnQuXHJcblxyXG5UaGVzZSBhdmF0YXJzIHdpbGwgY292ZXIgdGhlIGludGVybmV0IGZvciBodW5kcmVkcyBvZiB5ZWFycy5cclxuXHJcbk5vdyBpcyB5b3VyIGNoYW5jZSB0byBnZXQgYXZhdGFyIGZvciBjZW50dXJ5IiwKICAiaW1hZ2UiOiAiaHR0cHM6Ly9pcGZzLmlvL2lwZnMvUW1YOTVvOG5Wd1I3a0djclRpeVU4b1N0ZGJudnFQTlRXWVA5UWQ4NXlOWXF4UCIsCiAgImV4dGVybmFsX3VybCI6ICJodHRwczovL25mdHdvcmxkYXZhdGFyLnh5eiIKfQ==")

        XCTAssertNotNil(res)
    }

    /// check case when base64 doesn't have trailing symbols ==
    func testValidBase64StringWithoutTrailingSymbols() throws {
        //NOTE: example of data when decoder doesn't work without additional check `|| Data(base64Encoded: string) != nil`
        let decoder = Base64Decoder()
        // swiftlint:disable line_length
        let string = "data:application/json;base64,eyJuYW1lIjogIkR1bmdlb24gIzc1ODUiLCAiZGVzY3JpcHRpb24iOiAiRHVuZ2VvbnMgKGZvciBBZHZlbnR1cmVycykgaXMgZ2VuZXJhdGl2ZSBhcnQgcHJvamVjdCB0aGF0IGlzIGVudGlyZWx5IGdlbmVyYXRlZCBvbiBjaGFpbiB1c2luZyBubyBleHRlcm5hbCBzdG9yYWdlIHRvIGV4dGVuZCB0aGUgTG9vdCAoZm9yIEFkdmVudHVyZXJzKSBlY29zeXN0ZW0uIEZlZWwgZnJlZSB0byB1c2UgdGhlIER1bmdlb24gKGZvciBBZHZlbnR1cmVycykgTkZUIGluIGEgcHJvamVjdCBvZiB5b3VyIG93bi4iLCJhdHRyaWJ1dGVzIjogWyB7InRyYWl0X3R5cGUiOiAiSXRlbTAiLCAidmFsdWUiOiAiQmF0dGxlIiB9LCB7InRyYWl0X3R5cGUiOiAiSXRlbTEiLCAidmFsdWUiOiAiVHJhcCIgfSwgeyJ0cmFpdF90eXBlIjogIkl0ZW0yIiwgInZhbHVlIjogIkJvbWIiIH0sIHsidHJhaXRfdHlwZSI6ICJJdGVtMyIsICJ2YWx1ZSI6ICJXZWFwb24iIH0sIHsidHJhaXRfdHlwZSI6ICJSb29tIEhlaWdodCIsICJ2YWx1ZSI6ICIxMyJ9LCB7InRyYWl0X3R5cGUiOiAiUm9vbSBXaWR0aCIsICJ2YWx1ZSI6ICIyNCJ9LCB7InRyYWl0X3R5cGUiOiAiUm9vbSBQb3MgWCIsICJ2YWx1ZSI6ICI0In0sIHsidHJhaXRfdHlwZSI6ICJSb29tIFBvcyBZIiwgInZhbHVlIjogIjEifSwgeyJ0cmFpdF90eXBlIjogIkRvb3IgU2lkZXMiLCAidmFsdWUiOiAiU0UifSwgeyJ0cmFpdF90eXBlIjogIkRvb3IgUG9zIFgiLCAidmFsdWUiOiAiMTUifSwgeyJ0cmFpdF90eXBlIjogIkRvb3IgUG9zIFkiLCAidmFsdWUiOiAiMyJ9XSwgImltYWdlIjogImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIQnlaWE5sY25abFFYTndaV04wVW1GMGFXODlJbmhOYVc1WlRXbHVJRzFsWlhRaUlIWnBaWGRDYjNnOUlqQWdNQ0F6TURBZ01qZ3dJajQ4YzNSNWJHVStMbUpoYzJVZ2V5Qm1hV3hzT2lCbmNtVmxianNnWm05dWRDMW1ZVzFwYkhrNklFMWxibXh2TENCTlpYTnNieUJNUnlCTUlHWnZjaUJRYjNkbGNteHBibVVzSUVOaGMyTmhaR2xoSUVOdlpHVXNJRU52ZFhKcFpYSWdUbVYzTENCTmIyNXZjM0JoWTJVN0lHWnZiblF0YzJsNlpUb2dNVFJ3ZURzZ1ptOXVkQzFyWlhKdWFXNW5PaUJ1YjI1bE95QjNhR2wwWlMxemNHRmpaVG9nY0hKbE95QjlQQzl6ZEhsc1pUNDhjbVZqZENCM2FXUjBhRDBpTVRBd0pTSWdhR1ZwWjJoMFBTSXhNREFsSWlCbWFXeHNQU0ppYkdGamF5SWdMejQ4ZEdWNGRDQjRQU0l4TkNJZ2VUMGlNaklpSUdOc1lYTnpQU0ppWVhObElqNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmRHVjRkRDQ4ZEdWNGRDQjRQU0l4TkNJZ2VUMGlNemdpSUdOc1lYTnpQU0ppWVhObElqNGdJQ0FnNHBXVTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdRNHBXUTRwV1E0cFdYSUNBZ0lEd3ZkR1Y0ZEQ0OGRHVjRkQ0I0UFNJeE5DSWdlVDBpTlRRaUlHTnNZWE56UFNKaVlYTmxJajRnSUNBZzRwV1JMaTR1TGk0dUxpNHVMaTVpTGk0dUxpNHVMaTR1THVLVmtTQWdJQ0E4TDNSbGVIUStQSFJsZUhRZ2VEMGlNVFFpSUhrOUlqY3dJaUJqYkdGemN6MGlZbUZ6WlNJK0lDQWdJT0tWa1M0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpN2loS1lqSXlNalBDOTBaWGgwUGp4MFpYaDBJSGc5SWpFMElpQjVQU0k0TmlJZ1kyeGhjM005SW1KaGMyVWlQaUFnSUNEaWxaRXVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1NHBXUklDQWdJRHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXhOQ0lnZVQwaU1UQXlJaUJqYkdGemN6MGlZbUZ6WlNJK0lDQWdJT0tWa1M0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpN2lsWkVnSUNBZ1BDOTBaWGgwUGp4MFpYaDBJSGc5SWpFMElpQjVQU0l4TVRnaUlHTnNZWE56UFNKaVlYTmxJajRnSUNBZzRwV1JMaTR1TGk0dUxpNHVMaTR1TGxndUxpNHVMaTR1THVLVmtTQWdJQ0E4TDNSbGVIUStQSFJsZUhRZ2VEMGlNVFFpSUhrOUlqRXpOQ0lnWTJ4aGMzTTlJbUpoYzJVaVBpQWdJQ0RpbFpFdUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHU0cFdSSUNBZ0lEd3ZkR1Y0ZEQ0OGRHVjRkQ0I0UFNJeE5DSWdlVDBpTVRVd0lpQmpiR0Z6Y3owaVltRnpaU0krSUNBZ0lPS1ZrUzR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk3aWxaRWdJQ0FnUEM5MFpYaDBQangwWlhoMElIZzlJakUwSWlCNVBTSXhOallpSUdOc1lYTnpQU0ppWVhObElqNGdJQ0FnNHBXUkxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUtpNHVMdUtWa1NBZ0lDQThMM1JsZUhRK1BIUmxlSFFnZUQwaU1UUWlJSGs5SWpFNE1pSWdZMnhoYzNNOUltSmhjMlVpUGlBZ0lDRGlsWkV1TGk0dUxpNHVMaTR1TGk0dWR5NHVMaTR1TGk0dTRwV1JJQ0FnSUR3dmRHVjRkRDQ4ZEdWNGRDQjRQU0l4TkNJZ2VUMGlNVGs0SWlCamJHRnpjejBpWW1GelpTSStJQ0FnSU9LVmtTNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUxpNHVMaTdpbFpFZ0lDQWdQQzkwWlhoMFBqeDBaWGgwSUhnOUlqRTBJaUI1UFNJeU1UUWlJR05zWVhOelBTSmlZWE5sSWo0Z0lDQWc0cFdSTGk0dUxpNHVMaTR1TGk0dUxpNHVMaTR1TGk0dUx1S1ZrU0FnSUNBOEwzUmxlSFErUEhSbGVIUWdlRDBpTVRRaUlIazlJakl6TUNJZ1kyeGhjM005SW1KaGMyVWlQaUFnSUNEaWxacmlsWkRpbFpEaWxaRGlsWkRpbFpEaWxaRGlsWkRpbFpEaWxaRGlsWkRpbFpEaWxaRGlsWkRpaEtiaWxaRGlsWkRpbFpEaWxaRGlsWkRpbFpEaWxaRGlsWkRpbFowZ0lDQWdQQzkwWlhoMFBqeDBaWGgwSUhnOUlqRTBJaUI1UFNJeU5EWWlJR05zWVhOelBTSmlZWE5sSWo0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaklDQWdJQ0FnSUNBZ0lDQWdJRHd2ZEdWNGRENDhkR1Y0ZENCNFBTSXhOQ0lnZVQwaU1qWXlJaUJqYkdGemN6MGlZbUZ6WlNJK0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0l5QWdJQ0FnSUNBZ0lDQWdJQ0E4TDNSbGVIUStQQzl6ZG1jKyJ9"
        // swiftlint:enable line_length

        XCTAssertNotNil(decoder.decode(string: string))
    }
}
